¿Qué es Kotlin?
Kotlin es un lenguaje de programación para desarrollo de aplicaciones multiplataforma.
- Kotlin es un lenguaje estáticamente tipado, esto significa que nos obliga a definir desde el principio el tipo de una variable
- esto nos ayuda a corregir errores y a evitarlos antes incluso que ejecutemos el programa
- esto aumenta la velocidad de ejecucion porque la validación de los tipo de datos ocurre antes de compilar
CARACTERISTICAS
1. Kotlin es un lenguaje tipado.
2. Es null safety -> es una barrera contra los null pointer exception
3. Corre sobre la Java Virtual Machine
4. 100% interoperable con Java
5. Es un lenguaje de programación Funcional
6. Es fácil de aprender

Para ingresar al compilador de Kotlin: kotlinc-jvm
Para compilar el archivo (ejemplo): kotlinc C:\Users\javier5895\Documents\Javier Documents\Platzi\CursoDeKotlin\hello.kt -include-runtime -d C:\Users\javier5895\Documents\Javier Documents\Platzi\CursoDeKotlin\hello.jar
Para ejecutar el programa: java -jar hello.jar

Variables y tipos en Kotlin

Delcarar Variables
	- LAS PALABRAS RESERVADAS PARA DECLARAR VARIABLES SON val Y var,
	AHORA BIEN ESTAS PALABRAS RESERVADAS SE UTILIZAN DEPENDIENDO
	SI SE QUIERE DECLARA OBJETOS MUTABLES O INMUTABLES.

var mutable = "Variable que prodra cambiar su valor"
val inmutable = "Variable que no prodra cambiar su valor"

- Kotlin infiere el tipo de las variables si no se espesifica.
- En la siguiente liena de códigp se infiere que la variable
coche es de tipo String.

var coche = "Renault"

- Si se quiere espesificar el tipo se hace de la sigiente manera

var coche: String = "Renault"

- A diferencia de Java en Kotlin no hay variables primitivas.
 Tipos de enteros:
	* Long—64 bit
	* Int—32 bit
	* Short—16 bit
	* Byte—8 bit
 Tipo flotante
	* Double—64 bit
	* Float—32 bit
 Tipo String
	* String
Tipo booleano
	* Boolean

String templates
- Los Strings nos permiten almacenar cadenas de texto.
- En Kotlin para concatenar cadenas de texto usamos templates, estos templates nos permiten hacer que la concatenación sea mas fácil de leer. 
- En este caso las variables las podemos insertar directamente en el String usando el símbolo $.
- En los Strings también podemos hacer operaciones usando brackets { } después del símbolo $

Data Class
El data class significa que ya Kotlin cuando lo pase al compilador nos va a dar acceso a los setters y getters, al toString(), al hash. Ya no tenemos que escribirlo nosotros. Un data class lo usas cuando tienes que declarar clases que no implementan logica o que no van a ser usadas para herencia. Cabe recalcar que un data class es incompatible con la palabra reservada open la cual se usa para indicar que una clase puede heredar a otra.
- Modificador var
	Da acceso al argumento del constructor dentro de los métodos de la clase, y creará setters y getters para dicho argumento, de forma que podremos mutar ese campo.
- Modificador val
	Dará acceso al argumento dentro de los métodos de la clase como var, pero en este caso no creará setter, de forma que dicho argumento será inmutable dentro y fuera de la clase.

Default Values en Kotlin
	- Los valores por defecto que nos ofrece Kotlin nos ayudan cuando necesitamos datos predefinidos en nuestras variables.
	- Podemos usarlos tanto en las clases como en las funciones y nos ayudan a hacer el código mas legible y a reducir la cantidad de código que debemos escribir.

Diferencias Kotlin y Java
1. Null Safety: Una de las principales diferencias es el Null Safety, es la forma en que Kotlin evita que caigamos en errores de objetos nulos.
2. Lambdas: Aunque en Java 8 y tenemos lambdas, la diferencia es que Kotlin desde que nació ya traía este patron de funcionalidad.
3. Data clases: en una sola linea resumimos el constructor, los getters y los setters.
4. High order functions: son lambdas en funciones, que nos ayudan a pensar fuera de lo que estamos acostrumbrados.
5. Inline functions: definición de una función en solamente una linea.
6. Smart cast
7. Extension functions: darle mas capacidades a las clases que ya tenemos predeterminadas en Kotlin.

Lambdas
Una lambda es una maquina que tiene una función internamente pero podemos hacerla mas potente adicionando mas funcionalidad.

Funciones de orden mayor
Las funciones de orden mayor son funciones que viven dentro de otras funciones, básicamente lo que hacemos es pasarle una función como parámetro a otra función.

Inline functions
Debemos tener cuidado cuando declaramos las variables y funciones porque si no las declaramos correctamente podemos generar grandes cantidades de código que no es lo que queremos.
Las funciones inline nos permiten escribir código de mas alto nivel, es decir mas claro para el lenguaje humano.

Sealed Class
Sealed Class son clases que nos permiten contener clases que podemos reutilizar mas adelante para tomar decisiones.
Se declaran usando la palabra reservada sealed
Dentro de una Sealed Class solo puedo declarar otras clases.